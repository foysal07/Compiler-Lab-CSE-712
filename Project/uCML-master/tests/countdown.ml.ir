; ModuleID = 'main'
source_filename = "main"

@.ext_print_format_lld = private unnamed_addr constant [6 x i8] c"%lld\0A\00"
@.ext_print_format_lf = private unnamed_addr constant [5 x i8] c"%lf\0A\00"

declare i32 @printf(i8*, ...)

define internal void @echoint(i64) {
entry:
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.ext_print_format_lld, i32 0, i32 0), i64 %0)
  ret void
}

define internal void @echodouble(double) {
entry:
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.ext_print_format_lf, i32 0, i32 0), double %0)
  ret void
}

define internal i64 @main() {
entry:
  call void @countdown(i64 50)
  ret i64 0
}

define internal void @countdown(i64) {
entry:
  %number = alloca i64
  store i64 %0, i64* %number
  br label %init

init:                                             ; preds = %entry
  %i = alloca i64
  %1 = load i64, i64* %number
  store i64 %1, i64* %i
  br label %cond

cond:                                             ; preds = %progress, %init
  %2 = load i64, i64* %number
  %3 = load i64, i64* %i
  %4 = icmp sge i64 %3, %2
  %5 = icmp sle i64 %3, 0
  %6 = icmp sle i64 %3, %2
  %7 = icmp sge i64 %3, 0
  %8 = and i1 %6, %7
  %9 = and i1 %4, %5
  %10 = or i1 %9, %8
  br i1 %10, label %loop, label %after

loop:                                             ; preds = %cond
  %11 = load i64, i64* %i
  call void @echoint(i64 %11)
  br label %progress

progress:                                         ; preds = %loop
  %12 = load i64, i64* %i
  %13 = add i64 %12, -1
  store i64 %13, i64* %i
  br label %cond

after:                                            ; preds = %cond
  ret void
}
