; ModuleID = 'main'
source_filename = "main"

@.ext_print_format_lld = private unnamed_addr constant [6 x i8] c"%lld\0A\00"
@.ext_print_format_lf = private unnamed_addr constant [5 x i8] c"%lf\0A\00"

declare i32 @printf(i8*, ...)

define internal void @echoint(i64) {
entry:
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.ext_print_format_lld, i32 0, i32 0), i64 %0)
  ret void
}

define internal void @echodouble(double) {
entry:
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.ext_print_format_lf, i32 0, i32 0), double %0)
  ret void
}

define internal i64 @main() {
entry:
  %0 = call i64 @gcd(i64 280, i64 80)
  call void @echoint(i64 %0)
  ret i64 0
}

define internal i64 @gcd(i64, i64) {
entry:
  %a = alloca i64
  store i64 %0, i64* %a
  %b = alloca i64
  store i64 %1, i64* %b
  %2 = load i64, i64* %a
  %3 = icmp ne i64 %2, 0
  br i1 %3, label %then, label %otherwise

then:                                             ; preds = %entry
  %4 = load i64, i64* %b
  %5 = load i64, i64* %a
  %6 = srem i64 %4, %5
  %7 = load i64, i64* %a
  %8 = call i64 @gcd(i64 %6, i64 %7)
  ret i64 %8

otherwise:                                        ; preds = %entry
  br label %merge

merge:                                            ; preds = %otherwise
  %9 = load i64, i64* %b
  ret i64 %9
}
